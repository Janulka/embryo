/*
 *  libembryo
 *  Copyright (C) 2008 by Alexandre Devert
 *
 *           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *                  Version 2, December 2004
 *
 *  Copyright (C) 2004 Sam Hocevar
 *  14 rue de Plaisance, 75014 Paris, France
 *  Everyone is permitted to copy and distribute verbatim or modified
 *  copies of this license document, and changing it is allowed as long
 *  as the name is changed.
 *
 *            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 *
 *  0. You just DO WHAT THE FUCK YOU WANT TO.
 */

#include "embryo/ArrayOps.hpp"
#include "embryo/Evaluator.hpp"

using namespace std;
using namespace embryo;



Evaluator::Evaluator(const Picture& inTargetPic,
                     HandleT<Embryo> inEmbryo) : mTargetPic(inTargetPic),
    mCandidatePic(inTargetPic.width(), inTargetPic.height()), mEmbryo(inEmbryo) {
  mMaxDist = maxDistance(mTargetPic);
}



Evaluator::~Evaluator() { }



double
Evaluator::evaluate(const double* inVector,
                    size_t& outNbSteps,
                    double& outSimilarity) {
  // Setup the parameters of the model
  arrayd::copy(mEmbryo->controller().parameters(), inVector,
               mEmbryo->controller().nbParameters());

  // Embryo development
  size_t lNbSteps = 0;
  for(mEmbryo->init(); mEmbryo->update() && (lNbSteps < mEmbryo->nbStepsMax()); lNbSteps += 1);

  // Set the output infos
  if (lNbSteps < mEmbryo->nbStepsMax()) {
    mEmbryo->getColours(mCandidatePic);
    outSimilarity = distance(mCandidatePic, mTargetPic) / mMaxDist;
  }
  else
    outSimilarity = 1.0;

  outNbSteps = lNbSteps;
  
  // Compute the fitness
  double lTime = double(lNbSteps) / mEmbryo->nbStepsMax();
  return outSimilarity * (lTime * lTime + 1.0);
}
